diff --git a/superblame.py b/superblame.py
old mode 100644
new mode 100755
index d114191..c45113c
--- a/superblame.py
+++ b/superblame.py
@@ -1,3 +1,4 @@
+#!/usr/bin/python
 """
 Superblame
 
@@ -9,17 +10,57 @@ Eugen Sawin <esawin@me73.com>
 
 import argparse
 import os
+import subprocess
+
+from collections import defaultdict
+
+
+class HeatMap:
+
+  def __init__(self):
+    self.users = {}
+    self.heat = []
+
+  def user_id(self, name):
+    idx = self.users.setdefault(name, len(self.users))
+    self.users[name] = idx
+    if len(self.users) > len(self.heat):
+      self.heat.append([0, name])
+    return idx
+
+  def register_add(self, line, blames):
+    if line > 0:
+      self.heat[blames[line-1]][0] += 1
+    if line + 1 < len(blames):
+      self.heat[blames[line+1]][0] += 1
+
+  def register_remove(self, line, blames):
+    if line > 0:
+      self.heat[blames[line-1]][0] += 1
+    if line + 1 < len(blames):
+      self.heat[blames[line+1]][0] += 1
+
+  def __str__(self):
+    s = sorted(self.heat)
+    s = ['{}:{}'.format(n, v) for (v, n) in s]
+    return '\n'.join(s)
 
 
 class Mod:
 
   def __init__(self):
-    self.paths = []
+    self.reset(None)
+
+  def reset(self, path):
+    self.path = path
     self.adds = []
     self.removes = []
     self.blames = []
     self.line = 1
 
+  def append_blame(self, name):
+    self.blames.append(name)
+
   def append_add(self, line):
     if len(self.adds) and self.adds[-1][0] == line:
       self.adds[-1][1] += 1
@@ -33,65 +74,74 @@ class Mod:
       self.removes.append([line, 1])
 
   def __str__(self):
-    return "{{{}\n  {}\n  {}\n  {}\n  {}\n}}".format(self.paths, self.adds,\
-        self.removes, self.blames, self.line)
-
+    return "{{{},\n  {},\n  {},\n  {},\n  {},\n}}".format(
+            self.path, self.adds, self.removes, self.blames, self.line)
 
 
 # Mapping of firs split to handler, populated at the end of file.
 handler = {}
 
+args = None
+
 
 def main():
+  global args
+
   args = parse_args()
   with open(args.patch) as patch_file:
+    heat = HeatMap()
     a = Mod()
     b = Mod()
     for line in patch_file:
       if len(line) and line[0] in handlers:
-        handlers[line[0]](line, a, b)
-    print a
-    print
-    print b
+        handlers[line[0]](line, a, b, heat)
+    print 'a = ', a
+    print 'b = ', b
+    print heat
 
 
-def handle_mod(line, a, b):
+def handle_mod(line, a, b, heat):
   if line[0] == '+':
+    heat.register_add(b.line, b.blames)
     a.append_add(a.line)
     b.line += 1
   elif line[0] == '-':
+    heat.register_remove(b.line, b.blames)
     a.append_remove(a.line)
     a.line += 1
   else:
     assert False
 
 
-def handle_unmod(line, a, b):
+def handle_nonmod(line, a, b, heat):
   a.line += 1
   b.line += 1
   
  
-def handle_header(line, a, b):
+def handle_header(line, a, b, heat):
+  print 'a = ', a
+  print 'b = ', b
+  print
   splits = line.split()
   path = splits[1]
   if len(path) > 1 and (path[0:2] == 'a/' or path[0:2] == 'b/'):
     path = path[2:]
   if splits[0] == '---':
-    x = a
+    a.reset(path)
   elif splits[0] == '+++':
-    x = b
+    b.reset(path)
+    load_blames(b, path, heat)
   else:
     assert False
-  x.paths.append(path)
 
 
-def handle_header_or_mod(line, a, b):
+def handle_header_or_mod(line, a, b, heat):
   if line[0] == line[1] and line[1] == line[2]:
-    return handle_header(line, a, b)
-  return handle_mod(line, a, b);
+    return handle_header(line, a, b, heat)
+  return handle_mod(line, a, b, heat);
 
 
-def handle_hunk(line, a, b):
+def handle_hunk(line, a, b, heat):
   splits = line.split()
   assert splits[0] == '@@'
   a_splits = splits[1].split(',')
@@ -100,13 +150,12 @@ def handle_hunk(line, a, b):
   b.line = int(b_splits[0][1:])
 
 
-
-def handle_index(line, a, b):
+def handle_index(line, a, b, heat):
   splits = line.split()
   assert splits[0] == 'index'
 
 
-def handle_diff(line, a, b):
+def handle_diff(line, a, b, heat):
   splits = line.split()
   assert splits[0] == 'diff'
   assert splits[1] == '--git'
@@ -114,10 +163,33 @@ def handle_diff(line, a, b):
   assert splits[3][0] == 'b'
 
 
-def handle_comment(line, a, b):
+def handle_comment(line, a, b, heat):
   pass
 
 
+def load_git_blame(x, path, heat):
+  content = subprocess.check_output(['git', 'blame', path])
+  for line in content.split('\n'):
+    start = line.find('(')
+    if start == -1:
+      break
+    end = line.find(')')
+    assert end != -1
+    splits = line[start+1:end].split()
+    user = heat.user_id(' '.join(splits[:-4]))
+    x.append_blame(user)
+
+
+def load_hg_blame(x, path, heat):
+  content = subprocess.check_output(['hg', 'annotate', '-u', path])
+  for line in content.split('\n'):
+    end = line.find(':')
+    if end == -1:
+      break
+    user = heat.user_id(line[:end].strip())
+    x.append_blame(user)
+
+
 handlers = {
   '#': handle_comment,
   'd': handle_diff,
@@ -125,9 +197,31 @@ handlers = {
   '@': handle_hunk,
   '-': handle_header_or_mod,
   '+': handle_header_or_mod,
-  ' ': handle_unmod,
+  ' ': handle_nonmod,
+}
+
+
+blame_loaders = {
+  'git': load_git_blame,
+  'hg': load_hg_blame,
 }
 
+
+def load_blames(x, path, heat):
+  vcs = identify_vcs()
+  assert vcs in blame_loaders
+  blame_loaders[vcs](x, path, heat)
+
+
+def identify_vcs():
+  global args
+
+  if os.path.exists(args.src + '/.git'):
+    return 'git'
+  if os.path.exists(args.src + '/.hg'):
+    return 'hg'
+
+
 def parse_args():
   parser = argparse.ArgumentParser(description='Superblame')
   parser.add_argument('patch', help='patch')
